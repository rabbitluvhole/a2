# Define the CDF function (hardcoded for s = 1)
F_x <- function(x) {
if (x < 0) {
return(0)
} else if (x <= 1) {
return((3 * x / 2) * (1 - x^2 / 3))
} else {
return(1)
}
}
# Create a sequence of x values from -0.1 to 1.1
x_values <- seq(-0.1, 1.1, by = 0.01)
# Compute the CDF values for each x in the sequence
cdf_values <- sapply(x_values, F_x)
# Plot the CDF
plot(x_values, cdf_values, type = "l", col = "blue", lwd = 2,
main = "Cumulative Distribution Function (CDF)",
xlab = "x", ylab = "F(x)",
xlim = c(-0.1, 1.1), ylim = c(0, 1))
# Add a horizontal line at F(x) = 0.5
abline(h = 0.5, col = "red", lwd = 2, lty = 2)  # Red dashed line at y = 0.5
# Add grid lines
grid()
# Define the function to find the root (F(x) = 0.5)
root_function <- function(x) {
F_x(x) - 0.5
}
# Find the root (median)
median_x <- uniroot(root_function, c(0, 1))$root  # Solve in the interval [0, 1]
# Print the median
print(paste("The median is:", median_x))
y <- 0:20
phi_values <- c(0, 1, 2)
colors <- c("red", "blue", "green")
plot(y, (exp(0) / (1 + exp(0)))^y * (1 / (1 + exp(0))), type="h", col=colors[1], lwd=2, xlab="y", ylab="p(y | φ)", ylim=c(0, 1), main="Geometric PMF for different φ values")
lines(y, (exp(1) / (1 + exp(1)))^y * (1 / (1 + exp(1))), type="h", col=colors[2], lwd=2)
lines(y, (exp(2) / (1 + exp(2)))^y * (1 / (1 + exp(2))), type="h", col=colors[3], lwd=2)
legend("topright", legend=paste("φ =", phi_values), fill=colors)
y <- 0:20
phi_values <- c(0, 1, 2)
colors <- c("red", "blue", "purple")
plot(y, (exp(0) / (1 + exp(0)))^y * (1 / (1 + exp(0))), type="h", col=colors[1], lwd=2, xlab="y", ylab="p(y | φ)", ylim=c(0, 1), main="Geometric PMF for different φ values")
lines(y, (exp(1) / (1 + exp(1)))^y * (1 / (1 + exp(1))), type="h", col=colors[2], lwd=2)
lines(y, (exp(2) / (1 + exp(2)))^y * (1 / (1 + exp(2))), type="h", col=colors[3], lwd=2)
legend("topright", legend=paste("φ =", phi_values), fill=colors)
y <- 0:20
phi_values <- c(0, 1, 2)
colors <- c("red", "blue", "purple")
plot(y, (exp(0) / (1 + exp(0)))^y * (1 / (1 + exp(0))), type="h", col=colors[1], lwd=2, xlab="y", ylab="p(y | φ)", ylim=c(0, 1), main="Geometric PMF for different φ values")
lines(y, (exp(1) / (1 + exp(1)))^y * (1 / (1 + exp(1))), type="h", col=colors[2], lwd=2)
lines(y, (exp(2) / (1 + exp(2)))^y * (1 / (1 + exp(2))), type="h", col=colors[3], lwd=2)
legend("topright", legend=paste("φ =", phi_values), fill=colors)
# Define the geometric PMF for phi = 0
geometric_pmf_phi_0 <- function(y) {
(1/2)^(y + 1)  # This is 1 / 2^(y+1)
}
# Values of y from 0 to 20
y_values <- 0:20
# Calculate PMF for each y
pmf_values <- geometric_pmf_phi_0(y_values)
# Plotting the PMF
plot(y_values, pmf_values, type="h", col="blue", lwd=2,
xlab="y", ylab="p(y | φ=0)", main="Geometric PMF for φ = 0",
ylim=c(0, 1))
# Optionally, you can add points at the top of each line to indicate exact values
points(y_values, pmf_values, col="red", pch=19)
# Number of students who turned right
right_turn <- 168
# Total number of students
total_students <- 240
# Calculate the 95% confidence interval
prop.test(right_turn, total_students, conf.level = 0.95, correct = FALSE)
# Extract the state from the Location column
state <- state %>%
mutate(State = sapply(strsplit(Location, ","), `[`, 1))
data_cleaned = read.csv("resale_car_cleaned.csv")
data_cleaned$Location_State = sapply(strsplit(data_cleaned$Location, ","), `[`,1)
setwd("~/Desktop/3179/a2")
data_cleaned = read.csv("resale_car_cleaned.csv")
data = read.csv("resale_car.csv")
data_cleaned$Location_State = sapply(strsplit(data_cleaned$Location, ","), `[`,1)
df_model_state = data_cleaned[, c("Model", "Location_State")]
View(df_model_state)
write.csv(df_model_state, "model_state.csv", row.names = FALSE)
df = read.csv("model_state.csv")
View(df)
state_car_count = as.data.frame(table(df$Location_State))
colnames(state_car_count) <- c("State", "Car_Count")
View(state_car_count)
state_car_count = as.data.frame(table(df$Location_State))
View(state_car_count)
colnames(state_car_count) <- c("State", "Car_Count")
write.csv(state_car_count, "state_car_count.csv", row.names = FALSE)
